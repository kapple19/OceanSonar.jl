var documenterSearchIndex = {"docs":
[{"location":"00_preamble/02_text_case_styles/#Text-Case-Styles","page":"Text Case Styles","title":"Text Case Styles","text":"","category":"section"},{"location":"00_preamble/02_text_case_styles/","page":"Text Case Styles","title":"Text Case Styles","text":"The function textstyle is an implementation of a rigorous heuristic for converting between text case styles.","category":"page"},{"location":"00_preamble/02_text_case_styles/","page":"Text Case Styles","title":"Text Case Styles","text":"Also provided are the convenience methods titletext, pascaltext, and snaketext.","category":"page"},{"location":"00_preamble/02_text_case_styles/","page":"Text Case Styles","title":"Text Case Styles","text":"textstyle\ntitletext\npascaltext\nsnaketext","category":"page"},{"location":"00_preamble/02_text_case_styles/#OceanSonar.textstyle","page":"Text Case Styles","title":"OceanSonar.textstyle","text":"textstyle(\n    newstyle :: Union{Symbol, <:AbstractString},\n    oldtext :: Union{Symbol, <:AbstractString, <:Model{M}} where {M}\n    ;\n    keeptokens :: AbstractVector{<:AbstractString} = OceanSonar.keeptokens\n)\n\nConverts oldtext into the requested newstyle text.\n\nImplemented text styles:\n\n:space: Space-delimited tokens; tokens lowercased except keeptokens preserved.\n:Title/:title/:Space: Space-delimited tokens; tokens' first character uppercased except keeptokens preserved.\n:Pascal/:pascal: No token delimiter; tokens' first character uppercased except keeptokens preserved.\n:camel: As :pascal but the very first character of text is lowercase.\n:Snake: Underscore-delimited tokens; tokens' first character uppercased except keeptokens preserved.\n:snake: Underscore-delimited tokens; tokens' first character lowercased except keeptokens preserved.\n:Kebab: Hyphen-delimited tokens; tokens' first character uppercased except keeptokens.\n:kebab: Hyphen-delimited tokens; tokens' first character lowercased except keeptokens.\n\nExamples of implemented text styles:\n\n:Space: \"Say 32 Big Goodbyes to 1 Cruel NSW 1st World\"\n:space: \"say 32 big goodbyes to 1 cruel NSW 1st world\"\n:pascal: \"Say32BigGoodbyesTo1CruelNSW1stWorld\"\n:camel: \"say32BigGoodbyesTo1CruelNSW1stWorld\"\n:Snake: \"Say32BigGoodbyesto1CruelNSW1st_World\"\n:snake: \"say32biggoodbyesto1cruelNSW1st_world\"\n:Kebab: \"Say-32-Big-Goodbyes-to-1-Cruel-NSW-1st-World\"\n:kebab: \"say-32-big-goodbyes-to-1-cruel-NSW-1st-world\"\n\nThe title case behaves differently from Base.Unicode.titlecase, e.g.\n\njulia> titlecase(\"say-32-big-goodbyes-to-1-cruel-NSW-1st-world\")\n\"Say-32-Big-Goodbyes-To-1-Cruel-Nsw-1St-World\"\n\njulia> textstyle(:title, \"say-32-big-goodbyes-to-1-cruel-NSW-1st-world\")\n\"Say 32 Big Goodbyes to 1 Cruel NSW 1st World\"\n\nThe following convenience methods are also exported:\n\ntitletext\nsnaketext\npascaltext\n\n\n\n\n\n","category":"function"},{"location":"00_preamble/02_text_case_styles/#OceanSonar.titletext","page":"Text Case Styles","title":"OceanSonar.titletext","text":"titletext(text) -> ::AbstractString\npascaltext(text) -> ::AbstractString\nsnaketext(text) -> ::AbstractString\n\nConverts the inputted text to the named text case style.\n\nConvenience functions for textstyle, internally calls e.g. textstyle(:title, text).\n\n\n\n\n\n","category":"function"},{"location":"00_preamble/02_text_case_styles/#OceanSonar.pascaltext","page":"Text Case Styles","title":"OceanSonar.pascaltext","text":"titletext(text) -> ::AbstractString\npascaltext(text) -> ::AbstractString\nsnaketext(text) -> ::AbstractString\n\nConverts the inputted text to the named text case style.\n\nConvenience functions for textstyle, internally calls e.g. textstyle(:title, text).\n\n\n\n\n\n","category":"function"},{"location":"00_preamble/02_text_case_styles/#OceanSonar.snaketext","page":"Text Case Styles","title":"OceanSonar.snaketext","text":"titletext(text) -> ::AbstractString\npascaltext(text) -> ::AbstractString\nsnaketext(text) -> ::AbstractString\n\nConverts the inputted text to the named text case style.\n\nConvenience functions for textstyle, internally calls e.g. textstyle(:title, text).\n\n\n\n\n\n","category":"function"},{"location":"01_oceanography/01_ocean/01_sound_speed/#Ocean-Sound-Speed","page":"Sound Speed","title":"Ocean Sound Speed","text":"","category":"section"},{"location":"01_oceanography/01_ocean/01_sound_speed/","page":"Sound Speed","title":"Sound Speed","text":"sound_speed_profile","category":"page"},{"location":"01_oceanography/01_ocean/01_sound_speed/#OceanSonar.sound_speed_profile","page":"Sound Speed","title":"OceanSonar.sound_speed_profile","text":"sound_speed_profile(model::M, r::Real, z::Real) where {M <: Union{Symbol, <:AbstractString, <:Model}}\n\nSpeed [m/s] of sound in the ocean as a profile function in terms of range r [m] and depth z [m].\n\nSubtypes OceanSonar.MetricFunction.\n\n\n\n\n\n","category":"function"},{"location":"99_postamble/01_implementation/#Implementation","page":"Implementation","title":"Implementation","text":"","category":"section"},{"location":"99_postamble/01_implementation/#Repository-Contents","page":"Implementation","title":"Repository Contents","text":"","category":"section"},{"location":"99_postamble/01_implementation/","page":"Implementation","title":"Implementation","text":"The filesystem for the package code and documentation texts are organised in such a way as to be added in alphanumeric folder-then-contents order. This way, the complicated contents does not have to be managed by a plethora of include call managements for src/OceanSonar.jl, or the pages keyword for docs/make.jl.","category":"page"},{"location":"99_postamble/01_implementation/#OceanSonar-Modelling-Types","page":"Implementation","title":"OceanSonar Modelling Types","text":"","category":"section"},{"location":"99_postamble/01_implementation/","page":"Implementation","title":"Implementation","text":"The field of ocean sonar consists of many metrics, each of which have many alternative contexts and methods for calculation. For simplicity of usage and the avoidance of namespace overpopulation, OceanSonar implements a collection of types that do much of the heavy lifting in the background.","category":"page"},{"location":"99_postamble/01_implementation/","page":"Implementation","title":"Implementation","text":"Firstly:","category":"page"},{"location":"99_postamble/01_implementation/","page":"Implementation","title":"Implementation","text":"Model","category":"page"},{"location":"99_postamble/01_implementation/#OceanSonar.Model","page":"Implementation","title":"OceanSonar.Model","text":"Model(name::AbstractString)\nModel(name::Symbol)\n\nReturn Model{name}() which is used to dispatch functions by model names.\n\nThe name is stored as a Symbol in pascaltext style, i.e. only alphanumerals.\n\n\n\n\n\n","category":"type"},{"location":"99_postamble/01_implementation/","page":"Implementation","title":"Implementation","text":"The implementation of Model is such that a basic user will never need to be aware of it. It is a specialised version of Base.Val defined specially for this package. Model cooperates with types defined in OceanSonar so users can call models by their name in a string or a symbol. For example:","category":"page"},{"location":"99_postamble/01_implementation/","page":"Implementation","title":"Implementation","text":"using OceanSonar\nimport OceanSonar: sound_speed_profile\nsound_speed_profile(::Model{:MyModel}, z) = 1500 + exp(-z^2)\nsound_speed_profile(:MyModel, 1e3)\nsound_speed_profile(\"My Model\", 1e3)","category":"page"},{"location":"99_postamble/01_implementation/","page":"Implementation","title":"Implementation","text":"Thus Model behaves as both a dispatching tool and a convenience enabler. For more advanced users, it is also accessible for easily extending MetricFunction instances.","category":"page"},{"location":"99_postamble/01_implementation/","page":"Implementation","title":"Implementation","text":"To avoid piracy, this convenience behaviour is only defined for subtypes of OceanSonar.MetricFunction:","category":"page"},{"location":"99_postamble/01_implementation/","page":"Implementation","title":"Implementation","text":"OceanSonar.MetricFunction","category":"page"},{"location":"99_postamble/01_implementation/#OceanSonar.MetricFunction-99_postamble-01_implementation","page":"Implementation","title":"OceanSonar.MetricFunction","text":"OceanSonar.MetricFunction <: Function\n\nCalled instances dispatch its first argument as Symbol or AbstractString to Model.\n\nE.g.\n\nusing OceanSonar\nsound_speed isa OceanSonar.MetricFunction\nimport OceanSonar: sound_speed\nsound_speed(::Model{:MyModel}, z::Real) = 1500.0 + exp(-z^2)\nsound_speed(Model(:MyModel), 1e3)\nsound_speed(:MyModel, 1e3)\nsound_speed(\"My Model\", 1e3)\n\nSee also: Model.\n\n\n\n\n\n","category":"type"},{"location":"99_postamble/01_implementation/","page":"Implementation","title":"Implementation","text":"All metric functions defined by @implement_metric_function are listed in metric_functions:","category":"page"},{"location":"99_postamble/01_implementation/","page":"Implementation","title":"Implementation","text":"OceanSonar.metric_functions","category":"page"},{"location":"99_postamble/01_implementation/#OceanSonar.metric_functions-99_postamble-01_implementation","page":"Implementation","title":"OceanSonar.metric_functions","text":"OceanSonar.metric_functions :: Vector{<:OceanSonar.MetricFunction}\n\nVector of MetricFunctions defined in OceanSonar.\n\n\n\n\n\n","category":"constant"},{"location":"99_postamble/01_implementation/","page":"Implementation","title":"Implementation","text":"using OceanSonar\nOceanSonar.metric_functions","category":"page"},{"location":"99_postamble/01_implementation/","page":"Implementation","title":"Implementation","text":"For each MetricFunction, you can view the Models implemented for it by running listmodels:","category":"page"},{"location":"99_postamble/01_implementation/","page":"Implementation","title":"Implementation","text":"listmodels","category":"page"},{"location":"99_postamble/01_implementation/#OceanSonar.listmodels","page":"Implementation","title":"OceanSonar.listmodels","text":"listmodels(fcn::MetricFunction)\n\nReturns the names of fcn models as a Vector of Strings formatted with titletext.\n\nEach element of the output can be used as the first positional argument to fcn.\n\nSee also: listarguments, Model, OceanSonar.MetricFunction.\n\n\n\n\n\n","category":"function"},{"location":"99_postamble/01_implementation/","page":"Implementation","title":"Implementation","text":"For each Model of a MetricFunction, you can view its inputs and parameters with listarguments:","category":"page"},{"location":"99_postamble/01_implementation/","page":"Implementation","title":"Implementation","text":"listarguments","category":"page"},{"location":"99_postamble/01_implementation/#OceanSonar.listarguments","page":"Implementation","title":"OceanSonar.listarguments","text":"listarguments(fcn::MetricFunction, model::String)\nlistarguments(fcn::MetricFunction, model::Symbol)\nlistarguments(fcn::MetricFunction, model::Model)\n\nLists the inputs (positional arguments) and parameters (keyword arguments) of fcn for the model specified as a Vector of NamedTuples with fields inputs and parameters.\n\nWhile InteractiveUtils.methodswith gives similar information, listarguments provides the argument names in a useable form.\n\n\n\n\n\n","category":"function"},{"location":"01_oceanography/00_introduction/#Sonar-Oceanography","page":"Introduction","title":"Sonar Oceanography","text":"","category":"section"},{"location":"01_oceanography/00_introduction/","page":"Introduction","title":"Introduction","text":"The field of sonar oceanography concerns itself with properties and characteristics intrinsic to the ocean environment as is related to acoustics. Of significant influence to ocean acoustics are the ocean boundaries –- that is, the atmosphere and seabed.","category":"page"},{"location":"99_postamble/03_all_names/#All-Names","page":"All Names","title":"All Names","text":"","category":"section"},{"location":"99_postamble/03_all_names/","page":"All Names","title":"All Names","text":"A list of all names in OceanSonar is provided here, with links to their documentation.","category":"page"},{"location":"99_postamble/03_all_names/","page":"All Names","title":"All Names","text":"","category":"page"},{"location":"99_postamble/02_private_names/#Private-Names","page":"Private Names","title":"Private Names","text":"","category":"section"},{"location":"99_postamble/02_private_names/","page":"Private Names","title":"Private Names","text":"The following is an automated printing of documentation for OceanSonar.jl private names.","category":"page"},{"location":"99_postamble/02_private_names/","page":"Private Names","title":"Private Names","text":"Modules = [OceanSonar]\nPublic = false","category":"page"},{"location":"99_postamble/02_private_names/#OceanSonar.keeptokens","page":"Private Names","title":"OceanSonar.keeptokens","text":"OceanSonar.keeptokens\n\nUsed by textstyle. Vector of Strings of english language words (tokens) to keep tokenised and keep their text styles (for certain text style conversions by textstyle).\n\n\n\n\n\n","category":"constant"},{"location":"99_postamble/02_private_names/#OceanSonar.metric_functions","page":"Private Names","title":"OceanSonar.metric_functions","text":"OceanSonar.metric_functions :: Vector{<:OceanSonar.MetricFunction}\n\nVector of MetricFunctions defined in OceanSonar.\n\n\n\n\n\n","category":"constant"},{"location":"99_postamble/02_private_names/#OceanSonar.textstyleseps","page":"Private Names","title":"OceanSonar.textstyleseps","text":"OceanSonar.textstyleseps\n\nUsed by textstyle. NamedTuple of separators (delimiters) for different text style types.\n\n\n\n\n\n","category":"constant"},{"location":"99_postamble/02_private_names/#Core.String-Union{Tuple{Type{Model{M}}}, Tuple{M}} where M","page":"Private Names","title":"Core.String","text":"\n\nOverload of Core.Symbol for OceanSonar.Model types and instances.\n\n\n\n\n\n","category":"method"},{"location":"99_postamble/02_private_names/#Core.Symbol-Union{Tuple{Type{Model{M}}}, Tuple{M}} where M","page":"Private Names","title":"Core.Symbol","text":"\n\nOverload of Core.Symbol for OceanSonar.Model types and instances.\n\n\n\n\n\n","category":"method"},{"location":"99_postamble/02_private_names/#OceanSonar.MetricFunction","page":"Private Names","title":"OceanSonar.MetricFunction","text":"OceanSonar.MetricFunction <: Function\n\nCalled instances dispatch its first argument as Symbol or AbstractString to Model.\n\nE.g.\n\nusing OceanSonar\nsound_speed isa OceanSonar.MetricFunction\nimport OceanSonar: sound_speed\nsound_speed(::Model{:MyModel}, z::Real) = 1500.0 + exp(-z^2)\nsound_speed(Model(:MyModel), 1e3)\nsound_speed(:MyModel, 1e3)\nsound_speed(\"My Model\", 1e3)\n\nSee also: Model.\n\n\n\n\n\n","category":"type"},{"location":"99_postamble/02_private_names/#OceanSonar._textstyle_casify_token-Tuple{AbstractString, AbstractString}","page":"Private Names","title":"OceanSonar._textstyle_casify_token","text":"_textstyle_casify_token(newstyle, token; keeptokens = OceanSonar.keeptokens)\n\nConverts a single token to its specified newstyle.\n\n\n\n\n\n","category":"method"},{"location":"99_postamble/02_private_names/#OceanSonar._textstyle_verify_style-Union{Tuple{Val{C}}, Tuple{C}} where C","page":"Private Names","title":"OceanSonar._textstyle_verify_style","text":"_textstyle_verify_style\n\nUsed by textstyle. Verifies the request text style type.\n\n\n\n\n\n","category":"method"},{"location":"99_postamble/02_private_names/#OceanSonar.include_subroots-Tuple{AbstractString}","page":"Private Names","title":"OceanSonar.include_subroots","text":"OceanSonar.include_subroots(path::AbstractString)\n\nTrade-off: If adding a file, need to restart REPL session.\n\n\n\n\n\n","category":"method"},{"location":"99_postamble/02_private_names/#OceanSonar.isalphanumeric-Tuple{AbstractChar}","page":"Private Names","title":"OceanSonar.isalphanumeric","text":"OceanSonar.isalphanumeric(char::AbstractChar) -> Bool\n\nReturns true if char is inclusively between:\n\n'0' ≤ char ≤ '9'\n'a' ≤ char ≤ 'z'\n'A' ≤ char ≤ 'Z'\n\n\n\n\n\n","category":"method"},{"location":"99_postamble/02_private_names/#OceanSonar.@implement_metric_function-Tuple{Any}","page":"Private Names","title":"OceanSonar.@implement_metric_function","text":"@implement_metric_function function_name\n\nImplements a new MetricFunction <: Function instance ready for Model dispatching.\n\nSpecifically:\n\nDefines a concrete struct subtype of MetricFunction.\nDefines a const instance of the new subtype with the name function_name.\nAdds the new function to the list of metric_functions.\n\nSee also: Model, OceanSonar.MetricFunction.\n\nExample\n\n@implement_metric_function sound_speed_profile\nsound_speed_profile(::Model{:MyModel}, z::Real) = 1500.0 + exp(-z^2)\nsound_speed_profile(\"My Model\", 1e3)\n\n\n\n\n\n","category":"macro"},{"location":"00_preamble/01_general_auxiliaries/#Auxiliary-Implementations","page":"General Auxiliaries","title":"Auxiliary Implementations","text":"","category":"section"},{"location":"00_preamble/01_general_auxiliaries/","page":"General Auxiliaries","title":"General Auxiliaries","text":"uniquesort!","category":"page"},{"location":"00_preamble/01_general_auxiliaries/#OceanSonar.uniquesort!","page":"General Auxiliaries","title":"OceanSonar.uniquesort!","text":"uniquesort!\n\nComposition sort! then unique!.\n\n\n\n\n\n","category":"function"},{"location":"00_preamble/00_introduction/#Generic-Implementations","page":"Introduction","title":"Generic Implementations","text":"","category":"section"},{"location":"00_preamble/00_introduction/","page":"Introduction","title":"Introduction","text":"The many implementations in OceanSonar depend on implementations not specific to the field of ocean sonar. Such generic implementations that are also exported or otherwise public are documented here under Auxiliary.","category":"page"},{"location":"000_new_users/#New-Users-Introduction","page":"New Users","title":"New Users Introduction","text":"","category":"section"},{"location":"000_new_users/","page":"New Users","title":"New Users","text":"\"New\" could apply to users as some combination of:","category":"page"},{"location":"000_new_users/","page":"New Users","title":"New Users","text":"Pages = [\"000_new_users.md\"]\nDepth = 2:2","category":"page"},{"location":"000_new_users/","page":"New Users","title":"New Users","text":"This page addresses all of the above.","category":"page"},{"location":"000_new_users/#New-to-the-Field-of-Ocean-Sonar","page":"New Users","title":"New to the Field of Ocean Sonar","text":"","category":"section"},{"location":"000_new_users/","page":"New Users","title":"New Users","text":"The field of ocean sonar encompasses the applications of acoustic dynamics to sonar signal processing and detection in the ocean.","category":"page"},{"location":"000_new_users/#New-to-Julia-Programming","page":"New Users","title":"New to Julia Programming","text":"","category":"section"},{"location":"000_new_users/","page":"New Users","title":"New Users","text":"The Julia programming language boasts the speed of C++ and Fortran with the accessibility of MATLAB and Python. See the creators' manifesto on why they created Julia.","category":"page"},{"location":"000_new_users/","page":"New Users","title":"New Users","text":"The Julia language's main website provides links to many resources, including their documentation.","category":"page"},{"location":"000_new_users/","page":"New Users","title":"New Users","text":"Enterprise support is also provided.","category":"page"},{"location":"000_new_users/#New-to-this-Package","page":"New Users","title":"New to this Package","text":"","category":"section"},{"location":"000_new_users/","page":"New Users","title":"New Users","text":"As OceanSonar.jl is a Julia package, the Julia language is required. Installation instructions are provided here.","category":"page"},{"location":"000_new_users/","page":"New Users","title":"New Users","text":"Once Julia installed on your machine, OceanSonar.jl is installed by Julia itself:","category":"page"},{"location":"000_new_users/","page":"New Users","title":"New Users","text":"Open a Julia REPL (terminal).\nEnter package mode by pressing the ] key.\nEnter add OceanSonar.","category":"page"},{"location":"01_oceanography/01_ocean/00_introduction/#The-Ocean-Volume","page":"Introduction","title":"The Ocean Volume","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = OceanSonar","category":"page"},{"location":"#OceanSonar","page":"Home","title":"OceanSonar","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This is the documentation for the OceanSonar Julia package.","category":"page"},{"location":"","page":"Home","title":"Home","text":"OceanSonar","category":"page"},{"location":"#OceanSonar.OceanSonar","page":"Home","title":"OceanSonar.OceanSonar","text":"OceanSonar::Module\n\nContains a library of ocean sonar numerical modelling implementations.\n\nThe main features are:\n\nIn development.\n\nSome auxiliary functionalities are also provided:\n\ntextstyle applies a rigorous heuristic for converting between text case styles.\n\nThe following extensions have been implemented:\n\nIn development.\n\nSee the documentation website (in development) for more information.\n\n\n\n\n\n","category":"module"}]
}
