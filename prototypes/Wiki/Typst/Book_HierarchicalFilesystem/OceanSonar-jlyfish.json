{"1":{"result":{"mime":"text/plain","failed":false,"data":"4-element Vector{Any}:\n AbstractFloat\n AbstractIrrational\n Integer\n Rational"},"stdout":"","logs":[],"code":"using InteractiveUtils\nsubtypes(Real)"},"0":{"result":{"mime":"text/plain","failed":false,"data":"nothing"},"stdout":"","logs":[],"code":"using InteractiveUtils\nusing AbstractTrees"},"2":{"result":{"mime":"text/plain","failed":false,"data":"Any[]"},"stdout":"","logs":[],"code":"using InteractiveUtils\nabstract type MyType end\nstruct A <: MyType end\nabstract type B <: MyType end\nstruct C <: B end\nsubtypes(MyType)"},"3":{"result":{"mime":"text/plain","failed":false,"data":"nothing"},"stdout":"Real\n├─ AbstractFloat\n│  ├─ BigFloat\n│  ├─ BFloat16\n│  ├─ Float16\n│  ├─ Float32\n│  └─ Float64\n├─ AbstractIrrational\n│  └─ Irrational\n├─ Integer\n│  ├─ Bool\n│  ├─ Signed\n│  │  ├─ BigInt\n│  │  ├─ Int128\n│  │  ├─ Int16\n│  │  ├─ Int32\n│  │  ├─ Int64\n│  │  └─ Int8\n│  └─ Unsigned\n│     ├─ UInt128\n│     ├─ UInt16\n│     ├─ UInt32\n│     ├─ UInt64\n│     └─ UInt8\n└─ Rational\n","logs":[],"code":"using AbstractTrees\nusing InteractiveUtils\nAbstractTrees.children(::Type{T}) where {T <: Real} = subtypes(T)\nprint_tree(Real)"}}