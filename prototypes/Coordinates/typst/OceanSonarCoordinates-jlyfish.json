{"4":{"result":{"mime":"text/plain","failed":false,"data":"transform (generic function with 2 methods)"},"stdout":"","logs":[],"code":"function transform(::AC, ::AC, v::Real) where {AC <: AbstractCoordinate}\n\treturn v\nend"},"1":{"result":{"mime":"text/plain","failed":false,"data":"nothing"},"stdout":"","logs":[],"code":"abstract type AbstractCoordinate end\n\nstruct NonSpatial <: AbstractCoordinate end\nstruct Abscissa <: AbstractCoordinate end\nstruct Ordinate <: AbstractCoordinate end\nstruct Height <: AbstractCoordinate end\nstruct Depth <: AbstractCoordinate end\nstruct Range <: AbstractCoordinate end\nstruct Radius <: AbstractCoordinate end\nstruct Azimuth <: AbstractCoordinate end\nstruct Elevation <: AbstractCoordinate end\nstruct Declination <: AbstractCoordinate end"},"12":{"result":{"mime":"text/plain","failed":false,"data":"Test.DefaultTestSet(\"Conversion Inverses\", Any[], 0, false, false, true, 1.72636417834e9, 1.72636417834e9, false, \"none\")"},"stdout":"Test Summary:       | Total  Time\nConversion Inverses |     0  0.0s\n","logs":[],"code":"@testset \"Conversion Inverses\" begin\n\nend"},"2":{"result":{"mime":"text/plain","failed":false,"data":"String"},"stdout":"","logs":[],"code":"function String(::Type{AC}) where {AC <: AbstractCoordinate}\n\tstr = string(AC)\n\tidx = findlast('.', str)\n\treturn str[idx+1 : end]\nend\n\nString(::AC) where {AC <: AbstractCoordinate} = String(AC)"},"6":{"result":{"mime":"text/plain","failed":false,"data":"transform (generic function with 6 methods)"},"stdout":"","logs":[],"code":"function transform(::Height, ::Depth, z::Real)\n\treturn -z\nend\n\nfunction transform(::Depth, ::Height, z::Real)\n\treturn -z\nend\n\nfunction transform(::Elevation, ::Declination, ϕ::Real)\n\treturn -ϕ\nend\n\nfunction transform(::Declination, ::Elevation, ϕ::Real)\n\treturn -ϕ\nend"},"11":{"result":{"mime":"text/plain","failed":false,"data":"Test.DefaultTestSet(\"Conversion Inverses\", Any[], 0, false, false, true, 1.726369189416e9, 1.726369189416e9, false, \"none\")"},"stdout":"Test Summary:       | Total  Time\nConversion Inverses |     0  0.0s\n","logs":[],"code":"@testset \"Conversion Inverses\" begin\n\tC1 = (Range(), Azimuth())\n\tC2 = ()\nend"},"13":{"result":{"mime":"text/plain","failed":true,"data":"Some tests did not pass: 0 passed, 2 failed, 0 errored, 0 broken."},"stdout":"Test Summary:                 | Fail  Total  Time\nReflective Conversions        |    2      2  0.2s\n  Vertical                    |    1      1  0.1s\n    reflective_transformation |    1      1  0.1s\n  Polar                       |    1      1  0.1s\n    reflective_transformation |    1      1  0.0s\n","logs":[],"code":"@testset \"Reflective Conversions\" begin\n\tCoordinatePairs = (\n\t\tVertical = (Depth, Height),\n\t\tPolar = (Elevation, Declination)\n\t)\n\t@testset \"$PairType\" for PairType in keys(CoordinatePairs)\n\t\t(C1, C2) = CoordinatePairs[PairType]\n\t\t@check function reflective_transformation(v = Data.Floats())\n\t\t\ttransform(C1(), C2(), v) == -transform(C2(), C1(), v)\n\t\tend\n\tend\nend"},"5":{"result":{"mime":"text/plain","failed":false,"data":"Test.DefaultTestSet(\"Identity Conversions\", Any[], 0, false, false, true, 1.726369188989e9, 1.726369188997e9, false, \"none\")"},"stdout":"Test Summary:        | Total  Time\nIdentity Conversions |     0  0.0s\n","logs":[],"code":"@testset \"Identity Conversions\" begin\n\t@testset \"$(CT |> String)\" for CT in subtypes(AbstractCoordinate)\n\t\tC = CoordinateType()\n\t\t@check function identity_transformation(v = Data.Floats())\n\t\t\t[\n\t\t\t\tv\n\t\t\t\ttransform(C, C, v)\n\t\t\t\ttransform((C,), (C,), v)\n\t\t\t] |> allequal\n\t\tend\n\tend\nend"},"14":{"result":{"mime":"text/plain","failed":false,"data":"Test.DefaultTestSet(\"Conversion Inverses\", Any[], 0, false, false, true, 1.726362463315e9, 1.726362463315e9, false, \"none\")"},"stdout":"Test Summary:       | Total  Time\nConversion Inverses |     0  0.0s\n","logs":[],"code":"@testset \"Conversion Inverses\" begin\n\nend"},"7":{"result":{"mime":"text/plain","failed":true,"data":"Some tests did not pass: 0 passed, 2 failed, 0 errored, 0 broken."},"stdout":"Test Summary:                 | Fail  Total  Time\nReflective Conversions        |    2      2  0.1s\n  Vertical                    |    1      1  0.1s\n    reflective_transformation |    1      1  0.0s\n  Polar                       |    1      1  0.0s\n    reflective_transformation |    1      1  0.0s\n","logs":[],"code":"@testset \"Reflective Conversions\" begin\n\tCoordinatePairs = (\n\t\tVertical = (Depth, Height),\n\t\tPolar = (Elevation, Declination)\n\t)\n\t@testset \"$PairType\" for PairType in keys(CoordinatePairs)\n\t\t(C1, C2) = CoordinatePairs[PairType]\n\t\t@check function reflective_transformation(v = Data.Floats())\n\t\t\ttransform(C1(), C2(), v) == -transform(C2(), C1(), v)\n\t\tend\n\tend\nend"},"8":{"result":{"mime":"text/plain","failed":false,"data":"transform (generic function with 11 methods)"},"stdout":"","logs":[],"code":"function transform(::Tuple{Abscissa, Ordinate}, ::Tuple{Range}, x::Real, y::Real)\n\thypot(x, y)\nend\n\nfunction transform(::Tuple{Range, Azimuth}, ::Tuple{Abscissa}, r::Real, θ::Real)\n\tr * cos(θ)\nend\n\nfunction transform(::Tuple{Range, Azimuth}, ::Tuple{Ordinate}, r::Real, θ::Real)\n\tr * sin(θ)\nend\n\nfunction transform(::Tuple{Range, Height}, ::Tuple{Radius}, r::Real, z::Real)\n\thypot(r, z)\nend\n\nfunction transform(::Tuple{Range, Height}, ::Tuple{Elevation}, r::Real, z::Real)\n\tatand(z, r)\nend"},"10":{"result":{"mime":"text/plain","failed":false,"data":"# 15 methods for generic function \"transform\" from Main.var\"##JlyfishEval#4863\":\n  [1] transform(::Main.var\"##JlyfishEval#4863\".Height, ::Main.var\"##JlyfishEval#4863\".Depth, z::Real)\n     @ none:1\n  [2] transform(::Main.var\"##JlyfishEval#4863\".Depth, ::Main.var\"##JlyfishEval#4863\".Height, z::Real)\n     @ none:5\n  [3] transform(B::Tuple{Main.var\"##JlyfishEval#4863\".Range, Main.var\"##JlyfishEval#4863\".Height}, A::Tuple{Main.var\"##JlyfishEval#4863\".Radius, Main.var\"##JlyfishEval#4863\".Elevation}, vN1::Real, vN2::Real)\n     @ none:18\n  [4] transform(a::Tuple{Main.var\"##JlyfishEval#4863\".Radius, Main.var\"##JlyfishEval#4863\".Elevation}, b::Tuple{Main.var\"##JlyfishEval#4863\".Range, Main.var\"##JlyfishEval#4863\".Height}, vA1::Real, vA2::Real)\n     @ none:7\n  [5] transform(B::Tuple{Main.var\"##JlyfishEval#4863\".Abscissa, Main.var\"##JlyfishEval#4863\".Ordinate}, A::Tuple{Main.var\"##JlyfishEval#4863\".Range, Main.var\"##JlyfishEval#4863\".Azimuth}, vN1::Real, vN2::Real)\n     @ none:18\n  [6] transform(a::Tuple{Main.var\"##JlyfishEval#4863\".Range, Main.var\"##JlyfishEval#4863\".Azimuth}, b::Tuple{Main.var\"##JlyfishEval#4863\".Abscissa, Main.var\"##JlyfishEval#4863\".Ordinate}, vA1::Real, vA2::Real)\n     @ none:7\n  [7] transform(::Tuple{Main.var\"##JlyfishEval#4863\".Range, Main.var\"##JlyfishEval#4863\".Height}, ::Tuple{Main.var\"##JlyfishEval#4863\".Elevation}, r::Real, z::Real)\n     @ none:17\n  [8] transform(::Tuple{Main.var\"##JlyfishEval#4863\".Range, Main.var\"##JlyfishEval#4863\".Height}, ::Tuple{Main.var\"##JlyfishEval#4863\".Radius}, r::Real, z::Real)\n     @ none:13\n  [9] transform(::Tuple{Main.var\"##JlyfishEval#4863\".Range, Main.var\"##JlyfishEval#4863\".Azimuth}, ::Tuple{Main.var\"##JlyfishEval#4863\".Ordinate}, r::Real, θ::Real)\n     @ none:9\n [10] transform(::Tuple{Main.var\"##JlyfishEval#4863\".Range, Main.var\"##JlyfishEval#4863\".Azimuth}, ::Tuple{Main.var\"##JlyfishEval#4863\".Abscissa}, r::Real, θ::Real)\n     @ none:5\n [11] transform(::Tuple{Main.var\"##JlyfishEval#4863\".Abscissa, Main.var\"##JlyfishEval#4863\".Ordinate}, ::Tuple{Main.var\"##JlyfishEval#4863\".Range}, x::Real, y::Real)\n     @ none:1\n [12] transform(::Main.var\"##JlyfishEval#4863\".Elevation, ::Main.var\"##JlyfishEval#4863\".Declination, ϕ::Real)\n     @ none:9\n [13] transform(::Main.var\"##JlyfishEval#4863\".Declination, ::Main.var\"##JlyfishEval#4863\".Elevation, ϕ::Real)\n     @ none:13\n [14] transform(old::Tuple{Main.var\"##JlyfishEval#4863\".AbstractCoordinate}, new::Tuple{Main.var\"##JlyfishEval#4863\".AbstractCoordinate}, v::Real)\n     @ none:1\n [15] transform(::AC, ::AC, v::Real) where AC<:Main.var\"##JlyfishEval#4863\".AbstractCoordinate\n     @ none:1"},"stdout":"","logs":[],"code":"# transform((Range(), Azimuth()), (Abscissa(), Ordinate()), 1e3, 45)\nmethods(transform)"},"0":{"result":{"mime":"text/plain","failed":false,"data":"nothing"},"stdout":"","logs":[],"code":"using InteractiveUtils\nusing Test\nusing Supposition\n\nimport Core: String"},"9":{"result":{"mime":"text/plain","failed":false,"data":"nothing"},"stdout":"","logs":[],"code":"CoordinatePairs = [\n\t(:Range, :Azimuth, :Abscissa, :Ordinate),\n\t(:Radius, :Elevation, :Range, :Height)\n]\n\nfor (A1, A2, B1, B2) in CoordinatePairs\n\t@eval function transform(\n\t\ta::Tuple{$A1, $A2},\n\t\tb::Tuple{$B1, $B2},\n\t\tvA1::Real, vA2::Real\n\t)\n\t\t(\n\t\t\ttransform(a, b[1], vA1, vA2),\n\t\t\ttransform(a, b[2], vA1, vA2)\n\t\t)\n\tend\n\n\t@eval function transform(\n\t\tB::Tuple{$B1, $B2},\n\t\tA::Tuple{$A1, $A2},\n\t\tvN1::Real, vN2::Real\n\t)\n\t\t(\n\t\t\ttransform(b, a[1], vB1, vB2),\n\t\t\ttransform(b, a[2], vB1, vB2)\n\t\t)\n\tend\nend"},"3":{"result":{"mime":"text/plain","failed":false,"data":"transform (generic function with 1 method)"},"stdout":"","logs":[],"code":"function transform(old::Tuple{<:AbstractCoordinate}, new::Tuple{<:AbstractCoordinate}, v::Real)\n\ttransform(old[1], new[1], v)\nend"}}